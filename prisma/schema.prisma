// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//  npm install @prisma/client
//  npx prisma generate
//  npx prisma migrate dev --name init --create-only
//  npx prisma migrate deploy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                String      @id @default(uuid())
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  image             String? 
  username          String      @unique @db.VarChar(20)
  first_name        String      @db.VarChar(20)
  last_name         String      @db.VarChar(20)
  email             String      @unique
  password          String  
  phone_number      String  
  isAdmin           Boolean     @default(false)
  cart              Cart?
  order             Order[]
  addresses         Address[]
  wishlist          Wishlist[]
  review            Review[]
}


model Address {
  id                String      @id @default(uuid())
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  user_id           String
  city_id           String
  address_line1     String      @db.VarChar(240)
  address_line2     String      @db.VarChar(240)
  description       String
  user              User        @relation(fields: [user_id], references: [id])
  city              City        @relation(fields: [city_id], references: [id])
}

model City {
  id                String       @id @default(uuid())
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  name              String       @db.VarChar(100)
  state_id          String
  address           Address[]
  state             State @relation(fields: [state_id], references: [id])
}

model State {
  id                String       @id @default(uuid())
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  name              String       @db.VarChar(100)
  postal_code       String       @db.VarChar(20)
  cities            City[]
}

model Product {
  id                String       @id @default(uuid())
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  name              String       @db.VarChar(50)
  image             String       @db.VarChar(255)
  category_id       String
  subCategory_id    String
  description       String       @db.VarChar(3000)
  summary           String       @db.VarChar(200)
  price             Decimal
  quantity          Int
  wishlist          Wishlist[]
  cartItem          CartItems[]
  orderItems        OrderItems[]
  reviews           Review[]
  category          Category     @relation(fields: [category_id], references: [id])
  subCategory       SubCategory  @relation(fields: [subCategory_id], references: [id])
}

model SubCategory {
  id                String       @id @default(uuid())
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  name              String       @db.VarChar(100)
  category_id       String
  products          Product[]
  category          Category     @relation(fields: [category_id], references: [id])
}

model Category {
  id                String        @id @default(uuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  name              String        @db.VarChar(100)
  description       String
  product           Product[]
  subCategories     SubCategory[]
}

model Cart {
  id                String        @id @default(uuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user_id           String        @unique
  total_cost        Decimal       @default(0.0)
  cartItems         CartItems[]
  user              User          @relation(fields: [user_id], references: [id])
}

model CartItems {
  id                String        @id @default(uuid())
  cart_id           String
  product_id        String
  quantity          Int           
  cart              Cart          @relation(fields: [cart_id], references: [id])
  product           Product       @relation(fields: [product_id], references: [id])
}

model Wishlist {
  id                String        @id @default(uuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user_id           String
  product_id        String
  user              User          @relation(fields: [user_id], references: [id])
  product           Product       @relation(fields: [product_id], references: [id])
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id                String        @id @default(uuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user_id           String
  total_cost        Decimal
  orderItems        OrderItems[]
  status            OrderStatus   @default(PENDING)
  user              User          @relation(fields: [user_id], references: [id])
}

model OrderItems {
  id                String        @id @default(uuid())
  order_id          String
  product_id        String
  quantity          Int
  order             Order         @relation(fields: [order_id], references: [id])
  product           Product       @relation(fields: [product_id], references: [id])
}

model Review {
  id                String        @id @default(uuid())
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user_id           String
  product_id        String
  rating            Int
  review            String        @db.VarChar(2000)
  user              User          @relation(fields: [user_id], references: [id])
  product           Product       @relation(fields: [product_id], references: [id])
}